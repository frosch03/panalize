#+Title: Panalize.py

* Setup                                                            :noexport:
:PROPERTIES:
:dir:      ~/Programming/Python/covid-19/
:END:

#+NAME: panalize-preamble
#+BEGIN_SRC python :results file :exports none
  from IDS import IDS

  DATASET = "/home/frosch03/Programming/DataSets/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"  # noqa

  world = IDS(DATASET)
  de = world['Germany']
  fr = world['France']
  fr.selectRegions(['Martinique'], include_mainland=True)
  es = world['Spain']
  it = world['Italy']
  cn = world['China']
  cn.selectRegions(['Hubei'])
#+END_SRC

#+NAME: panalize-postamble
#+BEGIN_SRC python :results file :exports none
  # "filename" variable must be set by block
  # that expands this org source code block

  data.saveFigure(filename)
  return filename
#+END_SRC

* Description

Panalize is a simple script that draws infection data into
diagrams. It uses the data from the CSSE dataset of the Johns Hopkins
University. The dataset is distributed via [[https://github.com/CSSEGISandData/COVID-19.git][their git repository]].

** IDS
An IDS - Infections Data Set - does contain data about confirmed
infections on a larger scale. This could be the world with details per
contry or a country with details on the regions.

** SIDS
An SIDS - Specific Infections Data Set - does contain data about
confirmed infections limited to a specific set of infections data.

* Demo

First of all, lets define, where the .csv files, that contain the
Dataset, are located.

#+BEGIN_SRC python :exports code 
  DATASET = "<somefolder>/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
#+END_SRC

To setup things one must create an IDS object

#+BEGIN_SRC python :exports code
  world = IDS(DATASET)
#+END_SRC

#+RESULTS:

Now one can add SIDS objects of countries:

#+BEGIN_SRC python :exports code
  de = world['Germany']
  it = world['Italy']
  fr = world['France']
  fr.selectRegions(['Martinique'], include_mainland=True)
  es = world['Spain']
  cn = world['China']
  cn.selectRegions(['Hubei'])
#+END_SRC

For some countries the dataset contains detail informations of the
countries regions. Regional data can be either from within the country
as it is the case with China. These regions can be selected with the
~.selectRegions~ method supplied with the list of regions to be selected:

#+BEGIN_SRC python :exports code
  cn = world['China']
  cn.selectRegions(['Hubei'])
#+END_SRC

If a country has regions around the world, like eg. France does, the
mainlands data is marked with an empty region field. Here regions and
the mainland can be selected like so:

#+BEGIN_SRC python :exports code
  fr = world['France']
  fr.selectRegions(['Martinique'], include_mainland=True)
#+END_SRC
